/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeploymentDto,
  DeploymentCheckSummariesDto,
  DeploymentCreatedDto,
  DeploymentDto,
  DeploymentLogsDto,
  DeploymentStatusDto,
  DeploymentUsageSummariesDto,
  DeploymentsDto,
  UpdateDeploymentDto,
} from '../models/index';
import {
    CreateDeploymentDtoFromJSON,
    CreateDeploymentDtoToJSON,
    DeploymentCheckSummariesDtoFromJSON,
    DeploymentCheckSummariesDtoToJSON,
    DeploymentCreatedDtoFromJSON,
    DeploymentCreatedDtoToJSON,
    DeploymentDtoFromJSON,
    DeploymentDtoToJSON,
    DeploymentLogsDtoFromJSON,
    DeploymentLogsDtoToJSON,
    DeploymentStatusDtoFromJSON,
    DeploymentStatusDtoToJSON,
    DeploymentUsageSummariesDtoFromJSON,
    DeploymentUsageSummariesDtoToJSON,
    DeploymentsDtoFromJSON,
    DeploymentsDtoToJSON,
    UpdateDeploymentDtoFromJSON,
    UpdateDeploymentDtoToJSON,
} from '../models/index';

export interface DeleteDeploymentRequest {
    deploymentId: number;
}

export interface DeploymentsControllerCancelDeploymentRequest {
    deploymentId: number;
    token: string;
    redirectUrl: string;
}

export interface DeploymentsControllerConfirmDeploymentRequest {
    teamId: number;
    deploymentId: number;
    token: string;
    redirectUrl: string;
}

export interface GetDeploymentRequest {
    deploymentId: number;
}

export interface GetDeploymentChecksRequest {
    deploymentId: number;
    fromDate: string;
    toDate: string;
}

export interface GetDeploymentLogsRequest {
    deploymentId: number;
}

export interface GetDeploymentStatusRequest {
    deploymentId: number;
}

export interface GetDeploymentUsageRequest {
    deploymentId: number;
    fromDate: string;
    toDate: string;
}

export interface GetDeploymentsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetTeamDeploymentsRequest {
    teamId: number;
}

export interface PostTeamDeploymentRequest {
    teamId: number;
    createDeploymentDto: CreateDeploymentDto;
}

export interface PutDeploymentRequest {
    deploymentId: number;
    updateDeploymentDto: UpdateDeploymentDto;
}

/**
 * 
 */
export class DeploymentsApi extends runtime.BaseAPI {

    /**
     * Delete a deployment.
     * 
     */
    async deleteDeploymentRaw(requestParameters: DeleteDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling deleteDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a deployment.
     * 
     */
    async deleteDeployment(deploymentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeploymentRaw({ deploymentId: deploymentId }, initOverrides);
    }

    /**
     */
    async deploymentsControllerCancelDeploymentRaw(requestParameters: DeploymentsControllerCancelDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling deploymentsControllerCancelDeployment.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deploymentsControllerCancelDeployment.');
        }

        if (requestParameters.redirectUrl === null || requestParameters.redirectUrl === undefined) {
            throw new runtime.RequiredError('redirectUrl','Required parameter requestParameters.redirectUrl was null or undefined when calling deploymentsControllerCancelDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.redirectUrl !== undefined) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/cancel`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentsControllerCancelDeployment(deploymentId: number, token: string, redirectUrl: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentsControllerCancelDeploymentRaw({ deploymentId: deploymentId, token: token, redirectUrl: redirectUrl }, initOverrides);
    }

    /**
     */
    async deploymentsControllerConfirmDeploymentRaw(requestParameters: DeploymentsControllerConfirmDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling deploymentsControllerConfirmDeployment.');
        }

        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling deploymentsControllerConfirmDeployment.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deploymentsControllerConfirmDeployment.');
        }

        if (requestParameters.redirectUrl === null || requestParameters.redirectUrl === undefined) {
            throw new runtime.RequiredError('redirectUrl','Required parameter requestParameters.redirectUrl was null or undefined when calling deploymentsControllerConfirmDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.redirectUrl !== undefined) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/confirm`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentsControllerConfirmDeployment(teamId: number, deploymentId: number, token: string, redirectUrl: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentsControllerConfirmDeploymentRaw({ teamId: teamId, deploymentId: deploymentId, token: token, redirectUrl: redirectUrl }, initOverrides);
    }

    /**
     * Gets a deployment by ID.
     * 
     */
    async getDeploymentRaw(requestParameters: GetDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Gets a deployment by ID.
     * 
     */
    async getDeployment(deploymentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.getDeploymentRaw({ deploymentId: deploymentId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets deployments status.
     * 
     */
    async getDeploymentChecksRaw(requestParameters: GetDeploymentChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentCheckSummariesDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentChecks.');
        }

        if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
            throw new runtime.RequiredError('fromDate','Required parameter requestParameters.fromDate was null or undefined when calling getDeploymentChecks.');
        }

        if (requestParameters.toDate === null || requestParameters.toDate === undefined) {
            throw new runtime.RequiredError('toDate','Required parameter requestParameters.toDate was null or undefined when calling getDeploymentChecks.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/checks`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentCheckSummariesDtoFromJSON(jsonValue));
    }

    /**
     * Gets deployments status.
     * 
     */
    async getDeploymentChecks(deploymentId: number, fromDate: string, toDate: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentCheckSummariesDto> {
        const response = await this.getDeploymentChecksRaw({ deploymentId: deploymentId, fromDate: fromDate, toDate: toDate }, initOverrides);
        return await response.value();
    }

    /**
     * Gets deployments logs.
     * 
     */
    async getDeploymentLogsRaw(requestParameters: GetDeploymentLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentLogsDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/logs`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentLogsDtoFromJSON(jsonValue));
    }

    /**
     * Gets deployments logs.
     * 
     */
    async getDeploymentLogs(deploymentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentLogsDto> {
        const response = await this.getDeploymentLogsRaw({ deploymentId: deploymentId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets deployments status.
     * 
     */
    async getDeploymentStatusRaw(requestParameters: GetDeploymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentStatusDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/status`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentStatusDtoFromJSON(jsonValue));
    }

    /**
     * Gets deployments status.
     * 
     */
    async getDeploymentStatus(deploymentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentStatusDto> {
        const response = await this.getDeploymentStatusRaw({ deploymentId: deploymentId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets usage summaries.
     * 
     */
    async getDeploymentUsageRaw(requestParameters: GetDeploymentUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUsageSummariesDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentUsage.');
        }

        if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
            throw new runtime.RequiredError('fromDate','Required parameter requestParameters.fromDate was null or undefined when calling getDeploymentUsage.');
        }

        if (requestParameters.toDate === null || requestParameters.toDate === undefined) {
            throw new runtime.RequiredError('toDate','Required parameter requestParameters.toDate was null or undefined when calling getDeploymentUsage.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}/usage`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentUsageSummariesDtoFromJSON(jsonValue));
    }

    /**
     * Gets usage summaries.
     * 
     */
    async getDeploymentUsage(deploymentId: number, fromDate: string, toDate: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUsageSummariesDto> {
        const response = await this.getDeploymentUsageRaw({ deploymentId: deploymentId, fromDate: fromDate, toDate: toDate }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all deployments.
     * 
     */
    async getDeploymentsRaw(requestParameters: GetDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentsDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all deployments.
     * 
     */
    async getDeployments(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentsDto> {
        const response = await this.getDeploymentsRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all deployments.
     * 
     */
    async getTeamDeploymentsRaw(requestParameters: GetTeamDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentsDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamDeployments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/teams/{teamId}/deployments`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all deployments.
     * 
     */
    async getTeamDeployments(teamId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentsDto> {
        const response = await this.getTeamDeploymentsRaw({ teamId: teamId }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a deployment.
     * 
     */
    async postTeamDeploymentRaw(requestParameters: PostTeamDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentCreatedDto>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling postTeamDeployment.');
        }

        if (requestParameters.createDeploymentDto === null || requestParameters.createDeploymentDto === undefined) {
            throw new runtime.RequiredError('createDeploymentDto','Required parameter requestParameters.createDeploymentDto was null or undefined when calling postTeamDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/teams/{teamId}/deployments`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeploymentDtoToJSON(requestParameters.createDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentCreatedDtoFromJSON(jsonValue));
    }

    /**
     * Creates a deployment.
     * 
     */
    async postTeamDeployment(teamId: number, createDeploymentDto: CreateDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentCreatedDto> {
        const response = await this.postTeamDeploymentRaw({ teamId: teamId, createDeploymentDto: createDeploymentDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates a deployment.
     * 
     */
    async putDeploymentRaw(requestParameters: PutDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentDto>> {
        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling putDeployment.');
        }

        if (requestParameters.updateDeploymentDto === null || requestParameters.updateDeploymentDto === undefined) {
            throw new runtime.RequiredError('updateDeploymentDto','Required parameter requestParameters.updateDeploymentDto was null or undefined when calling putDeployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/deployments/{deploymentId}`.replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDeploymentDtoToJSON(requestParameters.updateDeploymentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentDtoFromJSON(jsonValue));
    }

    /**
     * Updates a deployment.
     * 
     */
    async putDeployment(deploymentId: number, updateDeploymentDto: UpdateDeploymentDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentDto> {
        const response = await this.putDeploymentRaw({ deploymentId: deploymentId, updateDeploymentDto: updateDeploymentDto }, initOverrides);
        return await response.value();
    }

}
