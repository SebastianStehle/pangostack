/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateServiceVersionDto,
  DeploymentsDto,
  ServiceDto,
  ServicePublicDto,
  ServiceVersionDto,
  ServiceVersionsDto,
  ServicesDto,
  ServicesPublicDto,
  UpdateServiceVersionDto,
  UpsertServiceDto,
  VerifyServiceVersionDto,
} from '../models/index';
import {
    CreateServiceVersionDtoFromJSON,
    CreateServiceVersionDtoToJSON,
    DeploymentsDtoFromJSON,
    DeploymentsDtoToJSON,
    ServiceDtoFromJSON,
    ServiceDtoToJSON,
    ServicePublicDtoFromJSON,
    ServicePublicDtoToJSON,
    ServiceVersionDtoFromJSON,
    ServiceVersionDtoToJSON,
    ServiceVersionsDtoFromJSON,
    ServiceVersionsDtoToJSON,
    ServicesDtoFromJSON,
    ServicesDtoToJSON,
    ServicesPublicDtoFromJSON,
    ServicesPublicDtoToJSON,
    UpdateServiceVersionDtoFromJSON,
    UpdateServiceVersionDtoToJSON,
    UpsertServiceDtoFromJSON,
    UpsertServiceDtoToJSON,
    VerifyServiceVersionDtoFromJSON,
    VerifyServiceVersionDtoToJSON,
} from '../models/index';

export interface DeleteServiceRequest {
    serviceId: number;
}

export interface DeleteServiceVersionRequest {
    serviceId: number;
    versionId: number;
}

export interface GetServiceRequest {
    serviceId: number;
}

export interface GetServiceDeploymentsRequest {
    serviceId: number;
    page?: number;
    pageSize?: number;
}

export interface GetServicePublicRequest {
    serviceId: number;
}

export interface GetServiceVersionRequest {
    serviceId: number;
    versionId: number;
}

export interface GetServiceVersionsRequest {
    serviceId: number;
}

export interface PostServiceRequest {
    upsertServiceDto: UpsertServiceDto;
}

export interface PostServiceVersionRequest {
    serviceId: number;
    createServiceVersionDto: CreateServiceVersionDto;
}

export interface PostVerifyServiceVersionRequest {
    serviceId: number;
    verifyServiceVersionDto: VerifyServiceVersionDto;
}

export interface PutServiceRequest {
    serviceId: number;
    upsertServiceDto: UpsertServiceDto;
}

export interface PutServiceVersionRequest {
    serviceId: number;
    versionId: number;
    updateServiceVersionDto: UpdateServiceVersionDto;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * Deletes the service.
     * 
     */
    async deleteServiceRaw(requestParameters: DeleteServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling deleteService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the service.
     * 
     */
    async deleteService(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteServiceRaw({ serviceId: serviceId }, initOverrides);
    }

    /**
     * Deletes the service version.
     * 
     */
    async deleteServiceVersionRaw(requestParameters: DeleteServiceVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling deleteServiceVersion.');
        }

        if (requestParameters.versionId === null || requestParameters.versionId === undefined) {
            throw new runtime.RequiredError('versionId','Required parameter requestParameters.versionId was null or undefined when calling deleteServiceVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions/{versionId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters.versionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the service version.
     * 
     */
    async deleteServiceVersion(serviceId: number, versionId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteServiceVersionRaw({ serviceId: serviceId, versionId: versionId }, initOverrides);
    }

    /**
     * Gets the service.
     * 
     */
    async getServiceRaw(requestParameters: GetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoFromJSON(jsonValue));
    }

    /**
     * Gets the service.
     * 
     */
    async getService(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDto> {
        const response = await this.getServiceRaw({ serviceId: serviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all deployments.
     * 
     */
    async getServiceDeploymentsRaw(requestParameters: GetServiceDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentsDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getServiceDeployments.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/deployments`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all deployments.
     * 
     */
    async getServiceDeployments(serviceId: number, page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentsDto> {
        const response = await this.getServiceDeploymentsRaw({ serviceId: serviceId, page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the service with the public properties.
     * 
     */
    async getServicePublicRaw(requestParameters: GetServicePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicePublicDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getServicePublic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/public/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicePublicDtoFromJSON(jsonValue));
    }

    /**
     * Gets the service with the public properties.
     * 
     */
    async getServicePublic(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicePublicDto> {
        const response = await this.getServicePublicRaw({ serviceId: serviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets a service version.
     * 
     */
    async getServiceVersionRaw(requestParameters: GetServiceVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceVersionDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getServiceVersion.');
        }

        if (requestParameters.versionId === null || requestParameters.versionId === undefined) {
            throw new runtime.RequiredError('versionId','Required parameter requestParameters.versionId was null or undefined when calling getServiceVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions/{versionId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters.versionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceVersionDtoFromJSON(jsonValue));
    }

    /**
     * Gets a service version.
     * 
     */
    async getServiceVersion(serviceId: number, versionId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceVersionDto> {
        const response = await this.getServiceVersionRaw({ serviceId: serviceId, versionId: versionId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all services versions.
     * 
     */
    async getServiceVersionsRaw(requestParameters: GetServiceVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceVersionsDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getServiceVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceVersionsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all services versions.
     * 
     */
    async getServiceVersions(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceVersionsDto> {
        const response = await this.getServiceVersionsRaw({ serviceId: serviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all services.
     * 
     */
    async getServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesDtoFromJSON(jsonValue));
    }

    /**
     * Gets all services.
     * 
     */
    async getServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesDto> {
        const response = await this.getServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets all services for end users.
     * 
     */
    async getServicesPublicRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesPublicDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesPublicDtoFromJSON(jsonValue));
    }

    /**
     * Gets all services for end users.
     * 
     */
    async getServicesPublic(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesPublicDto> {
        const response = await this.getServicesPublicRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a service.
     * 
     */
    async postServiceRaw(requestParameters: PostServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDto>> {
        if (requestParameters.upsertServiceDto === null || requestParameters.upsertServiceDto === undefined) {
            throw new runtime.RequiredError('upsertServiceDto','Required parameter requestParameters.upsertServiceDto was null or undefined when calling postService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertServiceDtoToJSON(requestParameters.upsertServiceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoFromJSON(jsonValue));
    }

    /**
     * Creates a service.
     * 
     */
    async postService(upsertServiceDto: UpsertServiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDto> {
        const response = await this.postServiceRaw({ upsertServiceDto: upsertServiceDto }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a service version.
     * 
     */
    async postServiceVersionRaw(requestParameters: PostServiceVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceVersionDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling postServiceVersion.');
        }

        if (requestParameters.createServiceVersionDto === null || requestParameters.createServiceVersionDto === undefined) {
            throw new runtime.RequiredError('createServiceVersionDto','Required parameter requestParameters.createServiceVersionDto was null or undefined when calling postServiceVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceVersionDtoToJSON(requestParameters.createServiceVersionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceVersionDtoFromJSON(jsonValue));
    }

    /**
     * Creates a service version.
     * 
     */
    async postServiceVersion(serviceId: number, createServiceVersionDto: CreateServiceVersionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceVersionDto> {
        const response = await this.postServiceVersionRaw({ serviceId: serviceId, createServiceVersionDto: createServiceVersionDto }, initOverrides);
        return await response.value();
    }

    /**
     * Verifies a service version.
     * 
     */
    async postVerifyServiceVersionRaw(requestParameters: PostVerifyServiceVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling postVerifyServiceVersion.');
        }

        if (requestParameters.verifyServiceVersionDto === null || requestParameters.verifyServiceVersionDto === undefined) {
            throw new runtime.RequiredError('verifyServiceVersionDto','Required parameter requestParameters.verifyServiceVersionDto was null or undefined when calling postVerifyServiceVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions/verify`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyServiceVersionDtoToJSON(requestParameters.verifyServiceVersionDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verifies a service version.
     * 
     */
    async postVerifyServiceVersion(serviceId: number, verifyServiceVersionDto: VerifyServiceVersionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postVerifyServiceVersionRaw({ serviceId: serviceId, verifyServiceVersionDto: verifyServiceVersionDto }, initOverrides);
    }

    /**
     * Updates the service.
     * 
     */
    async putServiceRaw(requestParameters: PutServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling putService.');
        }

        if (requestParameters.upsertServiceDto === null || requestParameters.upsertServiceDto === undefined) {
            throw new runtime.RequiredError('upsertServiceDto','Required parameter requestParameters.upsertServiceDto was null or undefined when calling putService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertServiceDtoToJSON(requestParameters.upsertServiceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoFromJSON(jsonValue));
    }

    /**
     * Updates the service.
     * 
     */
    async putService(serviceId: number, upsertServiceDto: UpsertServiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDto> {
        const response = await this.putServiceRaw({ serviceId: serviceId, upsertServiceDto: upsertServiceDto }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the service version.
     * 
     */
    async putServiceVersionRaw(requestParameters: PutServiceVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceVersionDto>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling putServiceVersion.');
        }

        if (requestParameters.versionId === null || requestParameters.versionId === undefined) {
            throw new runtime.RequiredError('versionId','Required parameter requestParameters.versionId was null or undefined when calling putServiceVersion.');
        }

        if (requestParameters.updateServiceVersionDto === null || requestParameters.updateServiceVersionDto === undefined) {
            throw new runtime.RequiredError('updateServiceVersionDto','Required parameter requestParameters.updateServiceVersionDto was null or undefined when calling putServiceVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/api/services/{serviceId}/versions/{versionId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters.versionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceVersionDtoToJSON(requestParameters.updateServiceVersionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceVersionDtoFromJSON(jsonValue));
    }

    /**
     * Updates the service version.
     * 
     */
    async putServiceVersion(serviceId: number, versionId: number, updateServiceVersionDto: UpdateServiceVersionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceVersionDto> {
        const response = await this.putServiceVersionRaw({ serviceId: serviceId, versionId: versionId, updateServiceVersionDto: updateServiceVersionDto }, initOverrides);
        return await response.value();
    }

}
