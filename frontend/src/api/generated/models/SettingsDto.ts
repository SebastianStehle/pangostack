/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LinkDto } from './LinkDto';
import {
    LinkDtoFromJSON,
    LinkDtoFromJSONTyped,
    LinkDtoToJSON,
} from './LinkDto';

/**
 * 
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
    /**
     * The name of the app.
     * @type {string}
     * @memberof SettingsDto
     */
    name: string | null;
    /**
     * The header color.
     * @type {string}
     * @memberof SettingsDto
     */
    primaryColor: string | null;
    /**
     * The primary color used for buttons and links.
     * @type {string}
     * @memberof SettingsDto
     */
    headerColor: string | null;
    /**
     * The primary content color used for buttons and links.
     * @type {string}
     * @memberof SettingsDto
     */
    primaryContentColor: string | null;
    /**
     * The welcome text.
     * @type {string}
     * @memberof SettingsDto
     */
    welcomeText: string | null;
    /**
     * Some custom css.
     * @type {string}
     * @memberof SettingsDto
     */
    customCss: string | null;
    /**
     * The footer text, for example for copyright infos.
     * @type {string}
     * @memberof SettingsDto
     */
    footerText: string | null;
    /**
     * The header links.
     * @type {Array<LinkDto>}
     * @memberof SettingsDto
     */
    headerLinks: Array<LinkDto> | null;
    /**
     * The footer links.
     * @type {Array<LinkDto>}
     * @memberof SettingsDto
     */
    footerLinks: Array<LinkDto> | null;
}

/**
 * Check if a given object implements the SettingsDto interface.
 */
export function instanceOfSettingsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "primaryColor" in value;
    isInstance = isInstance && "headerColor" in value;
    isInstance = isInstance && "primaryContentColor" in value;
    isInstance = isInstance && "welcomeText" in value;
    isInstance = isInstance && "customCss" in value;
    isInstance = isInstance && "footerText" in value;
    isInstance = isInstance && "headerLinks" in value;
    isInstance = isInstance && "footerLinks" in value;

    return isInstance;
}

export function SettingsDtoFromJSON(json: any): SettingsDto {
    return SettingsDtoFromJSONTyped(json, false);
}

export function SettingsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SettingsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'primaryColor': json['primaryColor'],
        'headerColor': json['headerColor'],
        'primaryContentColor': json['primaryContentColor'],
        'welcomeText': json['welcomeText'],
        'customCss': json['customCss'],
        'footerText': json['footerText'],
        'headerLinks': (json['headerLinks'] === null ? null : (json['headerLinks'] as Array<any>).map(LinkDtoFromJSON)),
        'footerLinks': (json['footerLinks'] === null ? null : (json['footerLinks'] as Array<any>).map(LinkDtoFromJSON)),
    };
}

export function SettingsDtoToJSON(value?: SettingsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'primaryColor': value.primaryColor,
        'headerColor': value.headerColor,
        'primaryContentColor': value.primaryContentColor,
        'welcomeText': value.welcomeText,
        'customCss': value.customCss,
        'footerText': value.footerText,
        'headerLinks': (value.headerLinks === null ? null : (value.headerLinks as Array<any>).map(LinkDtoToJSON)),
        'footerLinks': (value.footerLinks === null ? null : (value.footerLinks as Array<any>).map(LinkDtoToJSON)),
    };
}

