/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ParameterDefinitionDto } from './ParameterDefinitionDto';
import {
    ParameterDefinitionDtoFromJSON,
    ParameterDefinitionDtoFromJSONTyped,
    ParameterDefinitionDtoToJSON,
} from './ParameterDefinitionDto';
import type { ServicePriceDto } from './ServicePriceDto';
import {
    ServicePriceDtoFromJSON,
    ServicePriceDtoFromJSONTyped,
    ServicePriceDtoToJSON,
} from './ServicePriceDto';

/**
 * 
 * @export
 * @interface ServicePublicDto
 */
export interface ServicePublicDto {
    /**
     * The ID of the service.
     * @type {number}
     * @memberof ServicePublicDto
     */
    id: number;
    /**
     * The name of the service.
     * @type {string}
     * @memberof ServicePublicDto
     */
    name: string;
    /**
     * The description.
     * @type {string}
     * @memberof ServicePublicDto
     */
    description: string;
    /**
     * The latest version.
     * @type {string}
     * @memberof ServicePublicDto
     */
    version: string;
    /**
     * The currency.
     * @type {string}
     * @memberof ServicePublicDto
     */
    currency: string;
    /**
     * The price per Core and hour in the selected currency.
     * @type {number}
     * @memberof ServicePublicDto
     */
    pricePerCoreHour: number;
    /**
     * The price per Memory in GB and hour in the selected currency.
     * @type {number}
     * @memberof ServicePublicDto
     */
    pricePerMemoryGBHour: number;
    /**
     * The price per Storage in GB and hour in the selected currency.
     * @type {number}
     * @memberof ServicePublicDto
     */
    pricePerStorageGBMonth: number;
    /**
     * The price per Disk in GB and hour in the selected currency.
     * @type {number}
     * @memberof ServicePublicDto
     */
    pricePerVolumeGBHour: number;
    /**
     * The additional fixed price.
     * @type {number}
     * @memberof ServicePublicDto
     */
    fixedPrice: number;
    /**
     * The prices.
     * @type {Array<ServicePriceDto>}
     * @memberof ServicePublicDto
     */
    prices: Array<ServicePriceDto>;
    /**
     * The pricing model.
     * @type {string}
     * @memberof ServicePublicDto
     */
    pricingModel: ServicePublicDtoPricingModelEnum;
    /**
     * The parameters.
     * @type {Array<ParameterDefinitionDto>}
     * @memberof ServicePublicDto
     */
    parameters: Array<ParameterDefinitionDto>;
    /**
     * The instructions to show after the installation has been made.
     * @type {string}
     * @memberof ServicePublicDto
     */
    afterInstallationInstructions: string | null;
    /**
     * Indicates if this is a prerelease which should not be selectable.
     * @type {boolean}
     * @memberof ServicePublicDto
     */
    isPreRelease: boolean;
    /**
     * The expression to calculate the total number of Core.
     * @type {string}
     * @memberof ServicePublicDto
     */
    totalCores: string | null;
    /**
     * The expression to calculate the total memory.
     * @type {string}
     * @memberof ServicePublicDto
     */
    totalMemoryGB: string | null;
    /**
     * The expression to calculate the total volume size.
     * @type {string}
     * @memberof ServicePublicDto
     */
    totalVolumeGB: string | null;
    /**
     * The expression to calculate the total storage.
     * @type {string}
     * @memberof ServicePublicDto
     */
    totalStorageGB: string | null;
}


/**
 * @export
 */
export const ServicePublicDtoPricingModelEnum = {
    Fixed: 'fixed',
    PayPerUse: 'pay_per_use'
} as const;
export type ServicePublicDtoPricingModelEnum = typeof ServicePublicDtoPricingModelEnum[keyof typeof ServicePublicDtoPricingModelEnum];


/**
 * Check if a given object implements the ServicePublicDto interface.
 */
export function instanceOfServicePublicDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "pricePerCoreHour" in value;
    isInstance = isInstance && "pricePerMemoryGBHour" in value;
    isInstance = isInstance && "pricePerStorageGBMonth" in value;
    isInstance = isInstance && "pricePerVolumeGBHour" in value;
    isInstance = isInstance && "fixedPrice" in value;
    isInstance = isInstance && "prices" in value;
    isInstance = isInstance && "pricingModel" in value;
    isInstance = isInstance && "parameters" in value;
    isInstance = isInstance && "afterInstallationInstructions" in value;
    isInstance = isInstance && "isPreRelease" in value;
    isInstance = isInstance && "totalCores" in value;
    isInstance = isInstance && "totalMemoryGB" in value;
    isInstance = isInstance && "totalVolumeGB" in value;
    isInstance = isInstance && "totalStorageGB" in value;

    return isInstance;
}

export function ServicePublicDtoFromJSON(json: any): ServicePublicDto {
    return ServicePublicDtoFromJSONTyped(json, false);
}

export function ServicePublicDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServicePublicDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'version': json['version'],
        'currency': json['currency'],
        'pricePerCoreHour': json['pricePerCoreHour'],
        'pricePerMemoryGBHour': json['pricePerMemoryGBHour'],
        'pricePerStorageGBMonth': json['pricePerStorageGBMonth'],
        'pricePerVolumeGBHour': json['pricePerVolumeGBHour'],
        'fixedPrice': json['fixedPrice'],
        'prices': ((json['prices'] as Array<any>).map(ServicePriceDtoFromJSON)),
        'pricingModel': json['pricingModel'],
        'parameters': ((json['parameters'] as Array<any>).map(ParameterDefinitionDtoFromJSON)),
        'afterInstallationInstructions': json['afterInstallationInstructions'],
        'isPreRelease': json['isPreRelease'],
        'totalCores': json['totalCores'],
        'totalMemoryGB': json['totalMemoryGB'],
        'totalVolumeGB': json['totalVolumeGB'],
        'totalStorageGB': json['totalStorageGB'],
    };
}

export function ServicePublicDtoToJSON(value?: ServicePublicDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'version': value.version,
        'currency': value.currency,
        'pricePerCoreHour': value.pricePerCoreHour,
        'pricePerMemoryGBHour': value.pricePerMemoryGBHour,
        'pricePerStorageGBMonth': value.pricePerStorageGBMonth,
        'pricePerVolumeGBHour': value.pricePerVolumeGBHour,
        'fixedPrice': value.fixedPrice,
        'prices': ((value.prices as Array<any>).map(ServicePriceDtoToJSON)),
        'pricingModel': value.pricingModel,
        'parameters': ((value.parameters as Array<any>).map(ParameterDefinitionDtoToJSON)),
        'afterInstallationInstructions': value.afterInstallationInstructions,
        'isPreRelease': value.isPreRelease,
        'totalCores': value.totalCores,
        'totalMemoryGB': value.totalMemoryGB,
        'totalVolumeGB': value.totalVolumeGB,
        'totalStorageGB': value.totalStorageGB,
    };
}

