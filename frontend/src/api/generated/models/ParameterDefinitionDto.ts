/* eslint-disable */
// @ts-nocheck
//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pangostack
 * SaaS Deployment Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ParameterAllowedvalueDto } from './ParameterAllowedvalueDto';
import {
    ParameterAllowedvalueDtoFromJSON,
    ParameterAllowedvalueDtoFromJSONTyped,
    ParameterAllowedvalueDtoToJSON,
} from './ParameterAllowedvalueDto';

/**
 * 
 * @export
 * @interface ParameterDefinitionDto
 */
export interface ParameterDefinitionDto {
    /**
     * The name of the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    name: string;
    /**
     * The type of the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    type: ParameterDefinitionDtoTypeEnum;
    /**
     * Indicates if the parameter is required.
     * @type {boolean}
     * @memberof ParameterDefinitionDto
     */
    required: boolean;
    /**
     * Indicates if the parameter cannot be changed after creation.
     * @type {object}
     * @memberof ParameterDefinitionDto
     */
    immutable: object | null;
    /**
     * Indicates if the parameter should be displayed.
     * @type {object}
     * @memberof ParameterDefinitionDto
     */
    display: object | null;
    /**
     * Gives the parameter a readable name.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    label: string | null;
    /**
     * Describes the parameter.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    hint: string | null;
    /**
     * The default value of the parameter.
     * @type {object}
     * @memberof ParameterDefinitionDto
     */
    defaultValue: object | null;
    /**
     * Allowed values for the parameter.
     * @type {Array<ParameterAllowedvalueDto>}
     * @memberof ParameterDefinitionDto
     */
    allowedValues: Array<ParameterAllowedvalueDto> | null;
    /**
     * Minimum value for numeric parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    minValue: number | null;
    /**
     * Maximum value for numeric parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    maxValue: number | null;
    /**
     * Minimum length for string parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    minLength: number | null;
    /**
     * The step when the control is a slider.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    step: number | null;
    /**
     * Maximum length for string parameters.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    maxLength: number | null;
    /**
     * The editor.
     * @type {string}
     * @memberof ParameterDefinitionDto
     */
    editor: ParameterDefinitionDtoEditorEnum | null;
    /**
     * Optional section for grouping.
     * @type {number}
     * @memberof ParameterDefinitionDto
     */
    section: number | null;
}


/**
 * @export
 */
export const ParameterDefinitionDtoTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean'
} as const;
export type ParameterDefinitionDtoTypeEnum = typeof ParameterDefinitionDtoTypeEnum[keyof typeof ParameterDefinitionDtoTypeEnum];

/**
 * @export
 */
export const ParameterDefinitionDtoEditorEnum = {
    Default: 'default',
    Textarea: 'textarea'
} as const;
export type ParameterDefinitionDtoEditorEnum = typeof ParameterDefinitionDtoEditorEnum[keyof typeof ParameterDefinitionDtoEditorEnum];


/**
 * Check if a given object implements the ParameterDefinitionDto interface.
 */
export function instanceOfParameterDefinitionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "required" in value;
    isInstance = isInstance && "immutable" in value;
    isInstance = isInstance && "display" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "hint" in value;
    isInstance = isInstance && "defaultValue" in value;
    isInstance = isInstance && "allowedValues" in value;
    isInstance = isInstance && "minValue" in value;
    isInstance = isInstance && "maxValue" in value;
    isInstance = isInstance && "minLength" in value;
    isInstance = isInstance && "step" in value;
    isInstance = isInstance && "maxLength" in value;
    isInstance = isInstance && "editor" in value;
    isInstance = isInstance && "section" in value;

    return isInstance;
}

export function ParameterDefinitionDtoFromJSON(json: any): ParameterDefinitionDto {
    return ParameterDefinitionDtoFromJSONTyped(json, false);
}

export function ParameterDefinitionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParameterDefinitionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'required': json['required'],
        'immutable': json['immutable'],
        'display': json['display'],
        'label': json['label'],
        'hint': json['hint'],
        'defaultValue': json['defaultValue'],
        'allowedValues': (json['allowedValues'] === null ? null : (json['allowedValues'] as Array<any>).map(ParameterAllowedvalueDtoFromJSON)),
        'minValue': json['minValue'],
        'maxValue': json['maxValue'],
        'minLength': json['minLength'],
        'step': json['step'],
        'maxLength': json['maxLength'],
        'editor': json['editor'],
        'section': json['section'],
    };
}

export function ParameterDefinitionDtoToJSON(value?: ParameterDefinitionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'required': value.required,
        'immutable': value.immutable,
        'display': value.display,
        'label': value.label,
        'hint': value.hint,
        'defaultValue': value.defaultValue,
        'allowedValues': (value.allowedValues === null ? null : (value.allowedValues as Array<any>).map(ParameterAllowedvalueDtoToJSON)),
        'minValue': value.minValue,
        'maxValue': value.maxValue,
        'minLength': value.minLength,
        'step': value.step,
        'maxLength': value.maxLength,
        'editor': value.editor,
        'section': value.section,
    };
}

